HDU 2825 Wireless Password (AC自动机+DP) 
由于K很小，我们可以把状态压缩到一个int类型里，dp[i][j][k]表示长度为i的串匹配到状态j且字符串中的各个magic word的出现情况为k时的串的个数。i<=25,j<=100,k<=2^10-1。其中k的含义为，如果第i个magic word为改串的字串，则k的第i-1位为1，否则为0。那么25*100*1027就可以得出解。
#include<stdio.h>
#include<string.h>
#include<queue>
#define N 26
using namespace std;
struct trie{
    int fail,next[ N ];
    int tag;
}data[ 109 ];
int inp;
int init( int a ){
    for( int i=0;i<N;i++ ) data[ a ].next[ i ]=0;
    data[ a ].fail=0;
    data[ a ].tag=0;
    return a;
}
void ac_insert( char *a,int v ){
    int p=0;
    for( ;*a;a++ ){
        int d=*a-'a';
        if( data[ p ].next[ d ]==0 ) data[ p ].next[ d ]=init( ++inp );
        p=data[ p ].next[ d ];
    }
    data[ p ].tag=data[ p ].tag|( 1<<v );
}
void ac_bfs( void ){
    queue<int> que;
    for( int i=0;i<N;i++ )
        if( data[ 0 ].next[ i ] ) que.push( data[ 0 ].next[ i ] );
    while( que.size(  ) ){
        int p=que.front(  );
        data[ p ].tag=data[ p ].tag|data[ data[ p ].fail ].tag;
        for( int i=0;i<N;i++ ){
            int temp=data[ p ].next[ i ];
            if( temp ){
                que.push( temp );
                data[ temp ].fail=data[ data[ p ].fail ].next[ i ];
            }
            else
                data[ p ].next[ i ]=data[ data[ p ].fail ].next[ i ];
        }
        que.pop(  );
    }
}
int count( int a ){
    int ret=0;
    for( ;a;a>>=1 )
        if( a&1 ) ret++;
    return ret;
}
char str[ 109 ];
int dp[ 30 ][ 109 ][ 1030 ];
int main( void ){
    int n,m,l;
    while( ( scanf( "%d%d%d",&n,&m,&l ),n ) ){
        inp=0;
        init( 0 );
        for( int i=0;i<m;i++ ){
            scanf( "%s",str );
            ac_insert( str,i );
        }
        ac_bfs(  );
        int max=( 1<<m )-1;
        for( int i=0;i<=n;i++ )
            for( int j=0;j<=inp;j++ )
                memset( dp[ i ][ j ],0,sizeof( int )*( max+3 ) );
        dp[ 0 ][ 0 ][ 0 ]=1;
        for( int i=0;i<n;i++ )
            for( int j=0;j<=inp;j++ )                
                for( int k=0;k<=max;k++ )
                    if( dp[ i ][ j ][ k ] ){
                        for( int d=0;d<N;d++ ){
                            int temp=data[ j ].next[ d ];
                            int state=k|data[ temp ].tag;
                            dp[ i+1 ][ temp ][ state ]+=dp[ i ][ j ][ k ];
                            dp[ i+1 ][ temp ][ state ]%=20090717;                          
                        }
                    }
                
        int ret=0;
        for( int i=0;i<=inp;i++ )
            for( int j=0;j<=max;j++ )
                if( count( j )>=l )
                    ret=( ret+dp[ n ][ i ][ j ] ) 090717;
        printf( "%d\n",ret );
    }
}
