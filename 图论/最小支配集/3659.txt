题目 3: 电话网络 [Jeffrey Wang, 2007]

    Farmer John决定为他的所有奶牛都配备手机，以此鼓励她们互相交流。
不过，为此FJ必须在奶牛们居住的N(1 <= N <= 10,000)块草地中选一些建上
无线电通讯塔，来保证任意两块草地间都存在手机信号。所有的N块草地按1..N
顺次编号。

    所有草地中只有N-1对是相邻的，不过对任意两块草地A和B(1 <= A <= N; 
1 <= B <= N; A != B)，都可以找到一个以A开头以B结尾的草地序列，并且序列
中相邻的编号所代表的草地相邻。无线电通讯塔只能建在草地上，一座塔的服务
范围为它所在的那块草地，以及与那块草地相邻的所有草地。

    请你帮FJ计算一下，为了建立能覆盖到所有草地的通信系统，他最少要建
多少座无线电通讯塔。

程序名: tower

输入格式:

* 第1行: 1个整数，N

* 第2..N行: 每行为2个用空格隔开的整数A、B，为两块相邻草地的编号

输入样例 (tower.in):

5
1 3
5 2
4 3
3 5

输入说明:

    Farmer John的农场中有5块草地：草地1和草地3相邻，草地5和草地2、草地
4和草地3，草地3和草地5也是如此。更形象一些，草地间的位置关系大体如下：
（或是其他类似的形状）
               4  2
               |  |
            1--3--5

输出格式:

* 第1行: 输出1个整数，即FJ最少建立无线电通讯塔的数目

输出样例 (tower.out):

2

输出说明:

    FJ可以选择在草地2和草地3，或是草地3和草地5上建通讯塔。

最小支配集
"minimum dominating set problem"最小支配集(树状结构)

   贪心策略，设支配集为s

   先进行后序遍历，对不能被s支配(改点或改点相邻的节点都不在s中。)
   则将改点和改点相邻的节点加进s中。
   由于每个点只加一次。所以最后s中有所有点。
   按加入顺序相反的方向(reverse)，遍历s中的所有点，对于某一点:
   如果删除改点，该点和该点相邻的所有点仍旧被s所支配，则删除它。
   最后剩下的就是支配集。

   优化:后序遍历的时候，记录下每个点能被支配的数量，也就是相邻点以及本身在
   s中的数量，在贪心的时候优化。


   线性时间:O(n)

默认分类   2008-11-05 21:28   阅读20   评论0   字号： 大大  中中  小小 
//lightyue 3659 Accepted 952K 79MS G++ 1232B 2008-07-23 00:14:34 
#include<iostream>
#include<cstdio>
#include<vector>
using namespace std;
struct Node{
	int bianhao;
	vector<int>adjust;
};
Node node[10005];
int father[10024];
int visit[10024];
int jishu;
void preorder(int root , int Father){
	int i;
	jishu++;
	node[root].bianhao = jishu;
	father[node[root].bianhao] = Father;
	visit[root] = 1;
	if(node[root].adjust.size() == 0)
		return;
	for(i = 0 ; i < node[root].adjust.size() ; i++){
		if(visit[node[root].adjust[i]])
			continue;
		preorder(node[root].adjust[i] , node[root].bianhao);
	}
}
int main(){
	int n;
	while(1 == scanf("%d",&n)){
		int st , ed;
		int i;
		for(i = 0 ; i < n ; i++){
			node[i].adjust.clear();
		}
		for(i = 0 ; i < n-1 ; i++){
			scanf("%d%d",&st,&ed);
			node[st-1].adjust.push_back(ed-1);
			node[ed-1].adjust.push_back(st-1);
		}
		jishu = 0;
		memset(visit , 0 , sizeof(visit));
		preorder( 0 , 0);
		memset(visit , 0 , sizeof(visit));
		int ans = 0;
		for(i = n ; i >=1 ; i--){
			if(!visit[i]){
				if(visit[father[i]]!=2){
					ans++;
					visit[father[i]] =2;//2表示是支配点
					if(visit[father[father[i]]] ==0){
						visit[father[father[i]]] = 1;//1表示被支配点
					}
				}
			}
			
		}
		printf("%d\n" , ans);
	}
	return 0;
}




/*pku 3659 Cell Phone Network 最小支配集
http://acm.pku.edu.cn/JudgeOnline/problem?id=3659
求用最少的顶点覆盖所有顶点先做一次前序遍历编号，记录父子关系，使得儿子的编号大于父亲的编号进行o（n）的逆序扫描贪心选出支配集的顶点集合。
*/
#include <iostream>
#include <vector>
using namespace std;
vector < int > vec[10001]; //原图，双向
int id[10001];  //新图
int parent[10001]; //父子关系
int hash[10001];  //dfs判重
int num; //标号
int Set[10001], Count; //最小支配集的集合和个数
void dfs(int u){    
	int i, size = vec[u].size();   
	for(i = 0; i < size; i++)  {     
		int v = vec[u][i];      
		if(!hash[v])   {            
			hash[v] = 1;         
			id[v] = num++;        
			parent[ id[v] ] = id[u];   
			dfs(v);      
		}    
	}
}
int main()
{  
	int n, i, a, b;   
	while(scanf("%d", &n) != EOF )  
	{     
		for(i = 0; i < n-1; i++)      
		{       
			scanf("%d%d", &a, &b);        
			vec[a].push_back(b);       
			vec[b].push_back(a);      
		}        
		num = 1;  
		memset(hash, 0, sizeof (hash));  
		for(i = 1; i <= n; i++)     
		{    
			if(vec[i].size() == 1)          
			{         
				hash[i] = 1;             
				id[i] = num++;         
				parent[ id[i] ] = id[i];     
				dfs(i);             
				break;        
			}     
		}      
		Count = 0;   
		memset(Set, 0, sizeof(Set));      
		memset(hash, 0, sizeof(hash));    
		for(i = n; i >= 1; i--)       
		{    
			if(!hash[ i ])       
			{       
				if(!Set[ parent[i] ])            
					Count++;              
				Set[ parent[i] ] = 1;       
				hash[ parent[i] ] = 1;          
				hash[ parent[  parent[i] ]] = 1;   
			}      
		}        
		printf("%d\n", Count);   
	}
	return 0;
}

