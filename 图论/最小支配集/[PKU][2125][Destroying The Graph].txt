/*

--author: Answeror

---title: [PKU][2125][Destroying The Graph]

----link: http://acm.pku.edu.cn/JudgeOnline/problem?id=2125

----date: 2009-08-13

-problem: 一个有向图, 可以删除一个点的所有入边, 代价a[u], 可以删除一个点的所有出边, 代价b[u], 求删除所有边的最小代价.

solution: 有向图上的最小点覆盖集, 转化成最小割.

 

与[PKU][3308]同理, 最小点覆盖集, 这次从无向图变成了有向图, 换汤不换药, 只是在无向图上a[u]=b[u]罢了. 这里因为一条边上的两种操作至少要取一种, 所以只需要把两种操作看成顶点, 原来的边一端连删入边的操作, 另一端连删出边的操作, 则它们就构成了一个二分图, 把代价作为连接源和汇的权值, 求最小割即可.

*/

 

#include <cstdio>

 

const int N = 210;

 

// [MEC(min edge cut)]

// {version}

// 2009-08-12

//{

// {complexity}

// time: O(mn^2)

// {param}

// VSIZE: max vertex number.

// n: vertex number, index begin with 0.

// s: source.

// t: sink.

// g: adjacency matrix.

// {result}

// cend: cut number

// cut: the edge cut set, increase order.

// {return}

// min edge cut.

// {note}

// g will be changed.

// run on both direct or undirect graph.

 

// [ISAP][use adjacent matrix]

// {version}

// 2009-08-13

//{

// {param}

// VSIZE: max vertex number.

// n: vertex number, index begin with 0.

// s: source.

// t: sink.

// c: adjacent matrix.

// of: origial flow.

// {return}

// max flow.

// {note}

// c will be changed!

 

#include <algorithm>

#include <cmath>

using namespace std;

 

#define ISAP_FOR for(u=_pre[v=i];v!=s;u=_pre[v=u])

#define ZERO(x) (!(x))

// #define ZERO(x) (fabs(x)<EPS)

// #define EPS 1e-18

 

typedef int ElemT;

const int VSIZE = N;

ElemT INF = 1000000000;

 

int _dis[VSIZE], _pre[VSIZE], _cnt[VSIZE], _cur[VSIZE];

 

void isap_init(int n) {

    for (int i = 0; i < n; ++i)

        _cur[i] = _dis[i] = _cnt[i] = _pre[i] = _cur[i] = 0;

    _cnt[0] = n;

}

 

ElemT ISAP(int n, int s, int t, ElemT c[][VSIZE], ElemT of = 0) {

    isap_init(n);

    int i(s), j, d, u, v;

    ElemT f(of), aug;

    while (_dis[s] < n) {

        if (i == t) {

            // augment

            aug = INF;

            ISAP_FOR aug = min(aug, c[u][v]);

            ISAP_FOR {

                c[v][u] += aug;

                if (ZERO(c[u][v] -= aug)) i = u;

            }

            f += aug;

        }

        // find

        for (j = _cur[i]; j < n; ++j)

            if (!ZERO(c[i][j]) && _dis[j] + 1 == _dis[i]) {

                _cur[i] = j;

                break;

            }

        // advance

        if (j < n) _pre[j] = i, i = j;

        else {

            // gap

            if (!(--_cnt[_dis[i]])) break;

            // retreat

            for (d = n, j = 0; j < n; ++j)

                if (!ZERO(c[i][j]) && _dis[j] < d) {

                    d = _dis[j];

                    _cur[i] = j;

                }

            ++_cnt[_dis[i] = d + 1];

            if (i != s) i = _pre[i]; 

        }

    }

    return f;

}

 

//}

// [ISAP]

 

#define FORN(i) for(i=0;i<n;++i)

 

ElemT _cg[VSIZE][VSIZE];

bool _vis[VSIZE];

 

void mec_dfs(int i, int n) {

    if (_vis[i]) return;

    _vis[i] = true;

    int j; FORN(j) if (!_vis[j] && !ZERO(_cg[i][j])) mec_dfs(j, n);

}

 

ElemT MEC(int n, int s, int t, int &cend, ElemT g[][VSIZE], int cut[][2]) {

    if (s == t) return -1;

    int i, j, k, l; ElemT f;

    FORN(i) FORN(j) _cg[i][j] = g[i][j];

    FORN(i) _vis[i] = false;

    f = ISAP(n, s, t, _cg);

    mec_dfs(s, n);

    cend = 0;

    FORN(i) FORN(j) if (_vis[i] && !_vis[j] && !ZERO(g[i][j])) {

        cut[cend][0] = i;

        cut[cend][1] = j;

        ++cend;

    }

    return f;

}

 

//}

// end of [MEC(min edge cut)]

 

int _g[N][N];

int _cut[N][2];

 

int main() {

    int n, m, i, s, t, u, v, cend;

    scanf("%d%d", &n, &m);

    s = n + n, t = n + n + 1;

    for (i = 0; i < n; ++i) scanf("%d", _g[i + n] + t);

    for (i = 0; i < n; ++i) scanf("%d", _g[s] + i);

    for (i = 0; i < m; ++i) {

        scanf("%d%d", &u, &v);

        --u, --v;

        _g[u][v + n] = INF;

    }

    printf("%d\n", MEC(n + n + 2, s, t, cend, _g, _cut));

    printf("%d\n", cend);

    for (i = 0; i < cend; ++i) {

        if (_cut[i][1] < _cut[i][0]) swap(_cut[i][0], _cut[i][1]);

        if (_cut[i][1] == s) printf("%d -\n", _cut[i][0] + 1);

        else if (_cut[i][1] == t) printf("%d +\n", _cut[i][0] + 1 - n);

    }

    return 0;

}

