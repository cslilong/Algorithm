/*pku 

判断一个图中是否存在欧拉回路（每条边恰好只走一次，并能回到出发点的路径），在以下三种情况中有三种不同的算法：

一、无向图
每个顶点的度数都是偶数，则存在欧拉回路。

二、有向图（所有边都是单向的）
每个节顶点的入度都等于出度，则存在欧拉回路。

以上两种情况都很好理解。其原理就是每个顶点都要能进去多少次就能出来多少次。

三、混合图（有的边是单向的，有的边是无向的。常被用于比喻城市里的交通网络，有的路是单行道，有的路是双行道。）
找到一个给每条无向的边定向的策略，使得每个顶点的入度等于出度，这样就能转换成上面第二种情况。这就可以转化成一个二部图最大匹配问题

弗罗莱(Fleury)算法求欧拉回路

算法轮廓：
（1）任取v0∈V(G)，令P0=v0.
（2）设Pi=v0e1v1e2…eivi已经行遍，按下面方法来从E(G)-{e1,e2,…,ei}中选取ei+1：
（a）ei+1与vi相关联；
（b）除非无别的边可供行遍，否则ei+1不应该为Gi=G-{e1,e2,…,ei}中的桥。
（3）当（2）不能再进行时，算法停止。
*/
#include <stdio.h>
#include <string.h>
#include <iostream>
using namespace std;

struct stack
{int top , node[210];} f; //顶点的堆栈

int a[201][201]; //图的邻接矩阵

int n;

void dfs(int x)       //图的深度优先遍历
{
    int i;
   
    f.top ++; f.node[f.top] = x;
   
    for (i = 1; i <= n; i ++)
   
              if (a[i][x] > 0)
              {
                  a[i][x] = 0;      //删除此边
   
                  dfs(i);
   
                  break;
              }
}

void Euler(int x)     //欧拉路算法
{
    int i , b;
   
    f.top = 0; f.node[f.top] = x;     //入栈
    while (f.top >= 0)
    {
        b = 0;
        for (i = 1; i <= n; i ++)
            if (a[f.node[f.top]][i] > 0)
            {
                b = 1; break;
            }
        if (b == 0)       //如果没有点可以扩展，输出并出栈
        {
              printf("%d " , f.node[f.top]);
        f.top --;
        }
        else {f.top --; dfs(f.node[f.top+1]);}        //如果有，就DFS
    }
}

int main()
{

int m , s , t , num , i , j , start;
scanf("%d %d" , &n , &m); //n顶点数    m边数
memset(a , 0 , sizeof(a));
    for (i = 0; i < m; i ++)
    {
          scanf("%d %d" , &s , &t);
          a[s][t] = 1;
    }


      //判断是否存在欧拉回路

      s = 0; start = 1;
      int num1;
    for (i = 1; i <= n; i ++)
    {
          num = 0;
          num1 = 0;
    for (j = 1; j <= n; j ++)
        {    
             num1 += a[j][i];
             num += a[i][j];
     }   
    if (num1 != num)
    {
          s ++;
        }
        if(num>num1)
        start = i;
    }   
    cout<<start<<endl;
    if ((s == 0) || (s == 2))
       Euler(start);
        else printf("No Euler path\n");
        system("pause");   

    return 0;
}