//堆的操作

//元素上移(把第i个元素上移)
void sift_up(int h[],int i)
{
	bool done=false;
	if(i != 1)
	{
		while(!done && i !=1)
		{
			if(h[i]>[i/2]) swap(h[i],h[i/2]);
			else done=true;
			i=i/2;
		}
	}
}
//元素下移(把第i个元素下移)
void sift_down(int h[],int n,int i)
{
	bool done=false;
	if((2*i)<=n)
	{
		while(!done && (i=2*i<=n)
		{
			if(i+1<=n && h[i+1]>h[i]) i++;
			if(h[i/2]<h[i]) swap(h[i/2],h[i]);
			else done=true;
		}
	}
}
//元素插入
void insert(int h[],int &n,int x)
{
	n++;
	h[n]=x;
	sift_up(h,n);
}
//元素删除
void delet(int h[],int &n,int i)
{
	int x,y;
	x=h[i];y=h[n];
	n--;
	if(i<=n)
	{
		if(y>=x) sift_up(h,i);
		else sift_down(h,n,i);
	}
}
//堆的建立(1)
void make_heap1(int a[],int h[],int n)
{
	int i,m=0;
	for(i=0;i<n;i++) insert(h,m,a[i]);
}
//堆的建立(2)
void make_heap(int a[],int n)
{
	int i;
	a[n]=a[0];
	for(i=n/2;i>=1;i--) sift_down(a,n,i);
}
//堆排序
void heapsort(int a[],int n)
{
	int i;
	make_heap(a,n);
	for(i=n;i>1;i++)
	{
		swap(a[1],a[i]);
		sift_down(a,i-1,1);
	}
}

